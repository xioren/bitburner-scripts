var visibleServers = [];
var completedServers = [];
var targetServer = "";
var ownedServers = [];
var whitelist = ["CSEC", "darkweb"];
var files = ls("home", "/care_package/");
var requiredRam = getScriptRam("/care_package/bootstrap.script", "home");
var serverSuccess = false;
var portSmashingScripts = ["BruteSSH.exe", "FTPCrack.exe", "relaySMTP.exe", "HTTPWorm.exe", "SQLInject.exe"];


function Queue() {
    this.elements = ["home"];
}

Queue.prototype.enqueue = function (e) {
    if (completedServers.indexOf(e) == -1 &&
		ownedServers.indexOf(visibleServers[i]) == -1 &&
		this.elements.indexOf(e) == -1) {
        this.elements.push(e);
    }
};

Queue.prototype.dequeue = function () {
    return this.elements.shift();
};

Queue.prototype.isEmpty = function () {
    return this.elements.length == 0;
};

Queue.prototype.length = function() {
    return this.elements.length;
}

var queuedServers = new Queue();


function updatOwnedServers() {
	ownedServers = ["home"].concat(getPurchasedServers());
}


function portCount() {
	// count how many ports can be opened
	var maxPorts = 0;
	for (var i = 0; i < portSmashingScripts.length; i++) {
		if (fileExists(portSmashingScripts[i], "home")) {
			maxPorts += 1;
		}
	}
	return maxPorts;
}


function compromiseServer(hostname) {
	var portsRequired = getServerNumPortsRequired(hostname);
	var portsOpened = 0;

	if (portsRequired > 0 && portCount() >= portsRequired) {
		if (portsRequired >= 5) {
			sqlinject(hostname);
			portsOpened += 1;
		}
		if (portsRequired >= 4) {
			httpworm(hostname);
			portsOpened += 1;
		}
		if (portsRequired >= 3) {
			relaysmtp(hostname);
			portsOpened += 1;
		}
		if (portsRequired >= 2) {
			ftpcrack(hostname);
			portsOpened += 1;
		}
		if (portsRequired >= 1) {
			brutessh(hostname);
			portsOpened += 1;
		}

		if (portsOpened >= portsRequired) {
			nuke(hostname);
			return true;
		} else {
			print("cannot open enough ports on ", hostname);
			return false;
		}
	} else if (portsRequired == 0) {
		nuke(hostname);
		return true;
	} else {
		return false;
	}
}


function setupServer(hostname) {
	// move files to and start bootstrapping remote host
	var availableRam = getServerMaxRam(hostname) - getServerUsedRam(hostname);
	
	if (requiredRam < availableRam && whitelist.indexOf(hostname) == -1) {
		if (fileExists("/care_package/bootstrap.script", hostname) == false) {
			scp(files, "home", hostname);
		}
		if (scriptRunning("/care_package/mine.script", hostname) || scriptRunning("/care_package/fitness.script", hostname)) {
			killall(hostname);
		}
		if (exec("/care_package/bootstrap.script", hostname, 1) == 0) {
			return false;
		} else {
			return true;
		}
	} else {
		return true;
	}
}


main:
while (true) {
    targetServer = queuedServers.dequeue();
	 // scan for and queue servers visibles to targetServer
    visibleServers = scan(targetServer);
	for (var i = 0; i < visibleServers.length; i++) {
        queuedServers.enqueue(visibleServers[i]);
    }

	updatOwnedServers();
	if (hasRootAccess(targetServer) == false) {
		serverSuccess = completedServers.indexOf(targetServer) == -1 &&
					 	compromiseServer(targetServer) &&
						setupServer(targetServer);
	} else if (ownedServers.indexOf(targetServer) != -1) {
		// skip server setup for owned servers
		serverSuccess = true;
	} else {
		serverSuccess = completedServers.indexOf(targetServer) == -1 &&
						setupServer(targetServer);
	}
	
	if (serverSuccess) {
		completedServers.push(targetServer);
	} else {
		queuedServers.enqueue(targetServer);
		continue;
	}
    
	if (queuedServers.isEmpty()) {
        break;
    }
}
